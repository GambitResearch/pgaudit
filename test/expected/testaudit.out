SET client_min_messages = warning;
\set ECHO none
-- compact output
\t
\a
-- create an unprivileged test user
do language plpgsql $$
begin
	declare
		super bool;
	begin
		create user dumbuser nosuperuser;
	exception when duplicate_object then
		null;
	end;
end
$$;
create table test(id serial primary key, data text);
grant select, insert, update, delete on table test to dumbuser;
grant usage on sequence test_id_seq to dumbuser;
-- Default logging has tx and action fields
select testaudit.start('test');
audited
set role dumbuser;
\t
select * from testaudit.info('test');
table|fields|has_function|has_trigger|trigger_enabled
testaudit."public.test"|{ts,action}|t|t|t
(1 row)
\t
insert into test (data) values ('aaa');
update test set data = 'bbb' where id = 1;
delete from test where id = 1;
reset role;
select count(*) from testaudit."public.test"
where now() - '5 seconds'::interval < audit_ts and audit_ts < now();
3
select audit_action, id, data from testaudit."public.test" order by audit_ts;
INSERT|1|aaa
UPDATE|1|bbb
DELETE|1|bbb
-- Can pause and resume auditing
select testaudit.pause('test');
paused
set role dumbuser;
select * from testaudit.info('test');
testaudit."public.test"|{ts,action}|t|t|f
insert into test (data) values ('ccc');
reset role;
select audit_action, id, data from testaudit."public.test"
order by audit_ts;
INSERT|1|aaa
UPDATE|1|bbb
DELETE|1|bbb
select testaudit.restart('test');
audited
set role dumbuser;
select * from testaudit.info('test');
testaudit."public.test"|{ts,action}|t|t|t
insert into test (data) values ('ddd');
reset role;
select audit_action, id, data from testaudit."public.test"
order by audit_ts;
INSERT|1|aaa
UPDATE|1|bbb
DELETE|1|bbb
INSERT|3|ddd
-- Can't access by default
set role dumbuser;
select 1 from testaudit."public.test";
ERROR:  permission denied for relation public.test
insert into testaudit."public.test" values (now(), 'INSERT', 100, 'hack');
ERROR:  permission denied for relation public.test
delete from testaudit."public.test";
ERROR:  permission denied for relation public.test
drop table testaudit."public.test";
ERROR:  must be owner of relation public.test
reset role;
-- Calling start with the same arguments doesn't rename the audit table
select count(*) from testaudit."public.test";
4
select testaudit.start('test');
audited
select count(*) from testaudit."public.test";
4
select count(*)
from pg_class c join pg_namespace n on n.oid = relnamespace
where nspname = 'testaudit' and relname ~ '^public.test_';
0
-- But changing the arguments will result in a rename and new table creation
select testaudit.start('test', '{clock,action}'::text[]);
audited
select count(*) from testaudit."public.test";
0
select count(*)
from pg_class c join pg_namespace n on n.oid = relnamespace
where nspname = 'testaudit' and relname ~ '^public.test_';
1
-- Stop auditing
select pg_sleep(1);		-- conflict on rename

select testaudit.stop('test');
unaudited
select * from testaudit.info('test');
||f|f|
insert into test (data) values ('eee');
-- The audit table has been renamed away
select count(*)
from pg_class c join pg_namespace n on n.oid = relnamespace
where nspname = 'testaudit' and relname ~ '^public.test_';
2
-- Everything should work with problematic names
create schema "some-schema";
create table "some-schema"."some.table" ("some|field" integer);
select testaudit.start('"some-schema"."some.table"', '{id,action,table}');
audited
select * from testaudit.info('"some-schema"."some.table"');
testaudit."""some-schema"".""some.table"""|{id,action,table}|t|t|t
insert into "some-schema"."some.table" values (10);
insert into "some-schema"."some.table" values (11);
update "some-schema"."some.table" set "some|field" = 20 where "some|field" = 10;
select audit_id, audit_action, audit_table, "some|field"
from testaudit."""some-schema"".""some.table"""
order by audit_id;
1|INSERT|some.table|10
2|INSERT|some.table|11
3|UPDATE|some.table|20
-- Sequences get mangled names after stop/start: do we still grant them ok?
create table tseq(data int);
select testaudit.start('tseq', '{id}'::text[]);
audited
insert into tseq values (10);
select testaudit.stop('tseq');
unaudited
select testaudit.start('tseq', '{id}'::text[]);
audited
insert into tseq values (11);
select * from testaudit."public.tseq" order by audit_id;
1|11
-- Can audit other fields, but not everything
create table test2 (data integer);
select testaudit.status('test2');
unaudited
\set VERBOSITY terse
select testaudit.start('test2', '{foo}'::text[]);
ERROR:  unknown audit field: foo
\set VERBOSITY default
select testaudit.status('test2');
unaudited
select testaudit.start('test2', '{id,ts,clock,user,action,schema,table}'::text[]);
audited
select testaudit.status('test2');
audited
begin;
insert into test2 values (10);
select
	audit_ts = now(),
	audit_clock > now(),
	audit_clock < clock_timestamp(),
	audit_user = current_user,
	audit_id, audit_action, audit_schema, audit_table
	from testaudit."public.test2";
t|t|t|t|1|INSERT|public|test2
commit;
-- Dropping the extension audit should continue no problem
-- (at least it shouldn't fail dml)
drop extension pgaudit;
insert into "some-schema"."some.table" values (30);
select count(*) from testaudit."""some-schema"".""some.table""";
4
-- Clear up for next tests
drop table test;
drop table "some-schema"."some.table";
drop table tseq;
drop table test2;
drop schema "some-schema";
